{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAwCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IASP,SAASQ,EAAoBC,GAC3BC,EAAAd,GAASe,OAAOC,QAAQH,E,CAxDbI,SAASC,cAAc,SAC/BC,iBAAiB,UAGpB,SAAwBC,GACxBA,EAAMC,iBAGN,IAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBACrCO,EAAaC,SAASJ,EAAWK,OACjCC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAGpC,GAAIG,MAAML,IAAeK,MAAMF,IAASE,MAAMD,GAE5C,YADAjB,EAAoB,+CAKtB,IAAK,IAAImB,EAAI,EAAGA,GAAKF,EAAQE,IAAK,CAIhC7B,EAHiB6B,EACHN,GAAcM,EAAI,GAAKH,GAGlCI,MAAK,SAAAC,G,IAwBmBpB,EAxBhBV,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MAwBMS,EAvBD,uBAAwCqB,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,MAwB1EU,EAAAd,GAASe,OAAOoB,QAAQtB,E,IAtBnBuB,OAAM,SAAAH,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MAClBQ,EAAoB,sBAAuCsB,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\n// Obtener referencia al formulario\nconst form = document.querySelector('.form');\nform.addEventListener('submit', handleFormSubmit);\n\n// Función para manejar el envío del formulario\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n\n  // Obtener los valores de los campos del formulario\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n  const firstDelay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  // Validar los valores ingresados por el usuario\n  if (isNaN(firstDelay) || isNaN(step) || isNaN(amount)) {\n    displayErrorMessage('Invalid input. Please enter numeric values.');\n    return;\n  }\n\n  // Crear las promesas\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const delay = firstDelay + (i - 1) * step;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        displaySuccessMessage(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        displayErrorMessage(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\n// Función para crear una promesa\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Funciones para mostrar notificaciones utilizando Notiflix\nfunction displaySuccessMessage(message) {\n  Notiflix.Notify.success(message);\n}\n\nfunction displayErrorMessage(message) {\n  Notiflix.Notify.failure(message);\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$displayErrorMessage","message","$parcel$interopDefault","Notify","failure","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","firstDelay","parseInt","value","step","amount","isNaN","i","then","param","concat","success","catch"],"version":3,"file":"03-promises.21cc89d6.js.map"}